const execSync = require('child_process').execSync;
const https = require('https');
const path = require('path');
const packageJson = path.resolve('package.json');

const DINGTALK_KEYWORD = '依赖包';

function findAddedDependency(oldDep, newDep) {
    let added = {};
    for (let key in newDep) {
        if (Object.prototype.hasOwnProperty.call(newDep, key)) {
            if (!oldDep[key]) {
                added[key] = newDep[key];
            }
        }
    }
    return added;
}

function findDeletedDependency(oldDep, newDep) {
    let deleted = {};
    for (let key in oldDep) {
        if (Object.prototype.hasOwnProperty.call(oldDep, key)) {
            if (!newDep[key]) {
                deleted[key] = oldDep[key];
            }
        }
    }
    return deleted;
}

function findUpdatedDependency(oldDep, newDep) {
    let updated = {};
    for (let key in newDep) {
        if (Object.prototype.hasOwnProperty.call(newDep, key)) {
            if (oldDep[key] && newDep[key] && oldDep[key] !== newDep[key]) {
                updated[key] = `${oldDep[key]} -> ${newDep[key]}`;
            }
        }
    }
    return updated;
}

function diffPackage(oldDep, newDep) {
    return {
        added: findAddedDependency(oldDep, newDep),
        deleted: findDeletedDependency(oldDep, newDep),
        updated: findUpdatedDependency(oldDep, newDep),
    };
}

function generateDiffContent(oldPackageJson, newPackageJson) {
    const depTypes = ['dependencies', 'devDependencies', 'peerDependencies'];

    const contents = depTypes.map(depType => {
        let content = '';
        const oldDep = oldPackageJson[depType] || {};
        const newDep = newPackageJson[depType] || {};
        const diff = diffPackage(oldDep, newDep);

        if (Object.keys(diff.added).length > 0) {
            content += `### 新增\n\n`;
            content += Object.keys(diff.added).map(key => `- [${key}](http://npm.stary.ltd/#/detail/${key}): ${diff.added[key]}`).join('\n') + '\n\n';
        }
        if (Object.keys(diff.deleted).length > 0) {
            content += `### 移除\n\n`;
            content += Object.keys(diff.deleted).map(key => `- [${key}](http://npm.stary.ltd/#/detail/${key}): ${diff.deleted[key]}`).join('\n') + '\n\n';
        }
        if (Object.keys(diff.updated).length > 0) {
            content += `### 更新\n\n`;
            content += Object.keys(diff.updated).map(key => `- [${key}](http://npm.stary.ltd/#/detail/${key}): ${diff.updated[key]}`).join('\n') + '\n\n';
        }

        if (content) {
            content = `## ${DINGTALK_KEYWORD}类型：${depType}\n\n${content}`;
        }

        return content;
    });

    return contents;
}

function postToDingTalk(content, token) {
    const postData = {
        msgtype: 'markdown',
        at: {
            isAtAll: true,
        },
        markdown: {
            title: '依赖变更通知',
            text: content,
        },
    };
    const req = https.request({
        hostname: 'oapi.dingtalk.com',
        port: 443,
        path: `/robot/send?access_token=${token}`,
        method: 'POST',
        headers: {
            'Content-Type': 'application/json;charset=utf-8',
        },
    }, function (data) {
        let str = ''
        data.on('data', function (chunk) {
            str += chunk;
            process.exit(0);
        });
        data.on('end', function () {
            console.info(str.toString());
            process.exit(0);
        });
        data.on('error', function (err) {
            console.error(err);
            process.exit(0);
        })
    });

    req.write(JSON.stringify(postData));
    req.end();
}


module.exports = async function(accessToken) {

    const packageJsonDiffMessage = execSync(`git diff HEAD ${packageJson}`).toString().trim();
    if (packageJsonDiffMessage) {
        try {
            const name = execSync('git config user.name').toString().trim();
            const branch = execSync('git rev-parse --abbrev-ref HEAD').toString().trim();
            const oldFileStr = execSync(`git show HEAD:package.json`).toString().trim();
            const oldFile = JSON.parse(oldFileStr);
            const newFile = require(packageJson);
            const diffContent = generateDiffContent(oldFile, newFile);
            if (!diffContent.length || !diffContent.filter(Boolean).length) {
                console.info('no dependency changes');
                process.exit(0);
            }
            const message = `## 开发: ${name} \n\n ## 项目: ${newFile.name} \n\n ## 分支: ${branch} \n\n\n ${diffContent.join('\n')}`;

            postToDingTalk(message, accessToken);
        } catch (error) {
            console.error(error);
            process.exit(0);
        }
    } else {
        console.info('no diff changes');
        process.exit(0);
    }
}

